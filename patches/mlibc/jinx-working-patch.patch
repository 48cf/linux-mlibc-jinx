diff --git mlibc-clean/options/ansi/include/stdio.h mlibc-workdir/options/ansi/include/stdio.h
index 8b6de9f..3a3a7a1 100644
--- mlibc-clean/options/ansi/include/stdio.h
+++ mlibc-workdir/options/ansi/include/stdio.h
@@ -58,6 +58,7 @@ struct __mlibc_file_base {
 };
 
 typedef off_t fpos_t;
+typedef off64_t fpos64_t;
 
 /* [C11-7.21.1] I/O related macros */
 
diff --git mlibc-clean/options/glibc/generic/shadow.cpp mlibc-workdir/options/glibc/generic/shadow.cpp
index ea00f73..0375b82 100644
--- mlibc-clean/options/glibc/generic/shadow.cpp
+++ mlibc-workdir/options/glibc/generic/shadow.cpp
@@ -207,9 +207,18 @@ struct spwd *getspnam(const char *name) {
 	return res;
 }
 
-struct spwd *fgetspent(FILE *) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+struct spwd *fgetspent(FILE *f) {
+	static struct spwd sp;
+	static char *line;
+	struct spwd *res = 0;
+	size_t size = 0;
+	int cs;
+	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);
+	if(getline(&line, &size, f) >= 0 && __parsespent(line, &sp) >= 0) {
+		res = &sp;
+	}
+	pthread_setcancelstate(cs, 0);
+	return res;
 }
 
 void endspent(void) {
diff --git mlibc-clean/options/posix/generic/posix_locale.cpp mlibc-workdir/options/posix/generic/posix_locale.cpp
index bd8710a..f189c1c 100644
--- mlibc-clean/options/posix/generic/posix_locale.cpp
+++ mlibc-workdir/options/posix/generic/posix_locale.cpp
@@ -1,34 +1,55 @@
+#include <errno.h>
+#include <locale.h>
+
 #include <bits/posix/posix_locale.h>
 #include <bits/ensure.h>
 #include <mlibc/debug.hpp>
 
 namespace {
 
-bool newlocale_seen = false;
-bool uselocale_seen = false;
+struct LocaleObject {
+	/* ... */
+};
+
+LocaleObject cLocaleObject = {};
 
 }
 
-locale_t newlocale(int, const char *, locale_t) {
-	// Due to all of the locale functions being stubs, the locale will not be used
-	if(!newlocale_seen) {
-		mlibc::infoLogger() << "mlibc: newlocale() is a no-op" << frg::endlog;
-		newlocale_seen = true;
+locale_t newlocale(int, const char *locale, locale_t) {
+	if(!locale) {
+		errno = EINVAL;
+		return nullptr;
 	}
-	return nullptr;
+
+	if(strcmp(locale, "C") != 0 && strcmp(locale, "POSIX") != 0) {
+		mlibc::infoLogger() << "mlibc: newlocale() only supports \"C\" and \"POSIX\" locales" << frg::endlog;
+		errno = ENOENT;
+		return nullptr;
+	}
+
+	mlibc::infoLogger() << "mlibc: newlocale() is a stub" << frg::endlog;
+	return (locale_t)&cLocaleObject;
 }
 
 void freelocale(locale_t) {
 	mlibc::infoLogger() << "mlibc: freelocale() is a no-op" << frg::endlog;
-	return;
 }
 
-locale_t uselocale(locale_t) {
-	if(!uselocale_seen) {
-		mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
-		uselocale_seen = true;
+locale_t uselocale(locale_t locale) {
+	if(!locale) {
+		errno = EINVAL;
+		return nullptr;
 	}
-	return nullptr;
+
+	if(locale == LC_GLOBAL_LOCALE) {
+		locale = &cLocaleObject;
+	} else if(locale != &cLocaleObject) {
+		errno = EINVAL;
+		return nullptr;
+	}
+
+	mlibc::infoLogger() << "mlibc: uselocale() is a stub" << frg::endlog;
+	return &cLocaleObject;
 }
 
 locale_t duplocale(locale_t) {
