diff --git mlibc-clean/abis/linux/ipc.h mlibc-workdir/abis/linux/ipc.h
index b5f9f11..46abff4 100644
--- mlibc-clean/abis/linux/ipc.h
+++ mlibc-workdir/abis/linux/ipc.h
@@ -31,13 +31,13 @@ extern "C" {
 typedef int key_t;
 
 struct ipc64_perm {
-	key_t __ipc_perm_key;
+	key_t key;
 	uid_t uid;
 	gid_t gid;
 	uid_t cuid;
 	gid_t cgid;
 	mode_t mode;
-	int __ipc_perm_seq;
+	int __seq;
 	long __unused[2];
 };
 
diff --git mlibc-clean/options/ansi/include/stdio.h mlibc-workdir/options/ansi/include/stdio.h
index 8b6de9f..3a3a7a1 100644
--- mlibc-clean/options/ansi/include/stdio.h
+++ mlibc-workdir/options/ansi/include/stdio.h
@@ -58,6 +58,7 @@ struct __mlibc_file_base {
 };
 
 typedef off_t fpos_t;
+typedef off64_t fpos64_t;
 
 /* [C11-7.21.1] I/O related macros */
 
diff --git mlibc-clean/options/glibc/generic/gshadow.cpp mlibc-workdir/options/glibc/generic/gshadow.cpp
index f93a47d..9c724b0 100644
--- mlibc-clean/options/glibc/generic/gshadow.cpp
+++ mlibc-workdir/options/glibc/generic/gshadow.cpp
@@ -5,3 +5,18 @@ int getsgnam_r(const char *, struct sgrp *, char *, size_t, struct sgrp **) {
 	__ensure(!"Not implemented");
 	__builtin_unreachable();
 }
+
+int putsgent(const struct sgrp *, FILE *) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
+
+struct sgrp *fgetsgent(FILE *) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
+
+void endsgent(void) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
diff --git mlibc-clean/options/glibc/generic/shadow.cpp mlibc-workdir/options/glibc/generic/shadow.cpp
index ea00f73..0375b82 100644
--- mlibc-clean/options/glibc/generic/shadow.cpp
+++ mlibc-workdir/options/glibc/generic/shadow.cpp
@@ -207,9 +207,18 @@ struct spwd *getspnam(const char *name) {
 	return res;
 }
 
-struct spwd *fgetspent(FILE *) {
-	__ensure(!"Not implemented");
-	__builtin_unreachable();
+struct spwd *fgetspent(FILE *f) {
+	static struct spwd sp;
+	static char *line;
+	struct spwd *res = 0;
+	size_t size = 0;
+	int cs;
+	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);
+	if(getline(&line, &size, f) >= 0 && __parsespent(line, &sp) >= 0) {
+		res = &sp;
+	}
+	pthread_setcancelstate(cs, 0);
+	return res;
 }
 
 void endspent(void) {
diff --git mlibc-clean/options/glibc/include/gshadow.h mlibc-workdir/options/glibc/include/gshadow.h
index 4517700..560aa67 100644
--- mlibc-clean/options/glibc/include/gshadow.h
+++ mlibc-workdir/options/glibc/include/gshadow.h
@@ -1,6 +1,7 @@
 #ifndef _GSHADOW_H
 #define _GSHADOW_H
 
+#include <stdio.h>
 #include <paths.h>
 #include <bits/size_t.h>
 
@@ -20,6 +21,9 @@ extern "C" {
 #endif
 
 int getsgnam_r(const char *__name, struct sgrp *__result_buf, char *__buffer, size_t __len, struct sgrp **__result);
+int putsgent(const struct sgrp *__g, FILE *__stream);
+struct sgrp *fgetsgent(FILE *__stream);
+void endsgent(void);
 
 #ifdef __cplusplus
 }
diff --git mlibc-clean/options/linux/include/bits/linux/cpu_set.h mlibc-workdir/options/linux/include/bits/linux/cpu_set.h
index 0eff228..39b7e2e 100644
--- mlibc-clean/options/linux/include/bits/linux/cpu_set.h
+++ mlibc-workdir/options/linux/include/bits/linux/cpu_set.h
@@ -40,6 +40,24 @@ int __mlibc_cpu_count(const size_t __setsize, const cpu_set_t *__set);
 #define CPU_COUNT_S(setsize, set) __mlibc_cpu_count((setsize), (set))
 #define CPU_COUNT(set) CPU_COUNT_S(sizeof(cpu_set_t), set)
 
+#define __CPU_op_func_S(func, op) \
+static __inline void __CPU_##func##_S(size_t __size, cpu_set_t *__dest, \
+	const cpu_set_t *__src1, const cpu_set_t *__src2) \
+{ \
+	size_t __i; \
+	for (__i=0; __i<__size/sizeof(long); __i++) \
+		((unsigned long *)__dest)[__i] = ((unsigned long *)__src1)[__i] \
+			op ((unsigned long *)__src2)[__i] ; \
+}
+
+__CPU_op_func_S(AND, &)
+__CPU_op_func_S(OR, |)
+__CPU_op_func_S(XOR, ^)
+
+#define CPU_AND_S(a,b,c,d) __CPU_AND_S(a,b,c,d)
+#define CPU_OR_S(a,b,c,d) __CPU_OR_S(a,b,c,d)
+#define CPU_XOR_S(a,b,c,d) __CPU_XOR_S(a,b,c,d)
+
 #endif /* !__MLIBC_ABI_ONLY */
 
 #ifdef __cplusplus
diff --git mlibc-clean/options/posix/generic/mqueue.cpp mlibc-workdir/options/posix/generic/mqueue.cpp
index d635419..3719028 100644
--- mlibc-clean/options/posix/generic/mqueue.cpp
+++ mlibc-workdir/options/posix/generic/mqueue.cpp
@@ -20,3 +20,8 @@ mqd_t mq_open(const char *, int, ...) {
 	__ensure(!"Not implemented");
 	__builtin_unreachable();
 }
+
+int mq_close(mqd_t) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
diff --git mlibc-clean/options/posix/generic/posix_locale.cpp mlibc-workdir/options/posix/generic/posix_locale.cpp
index bd8710a..f189c1c 100644
--- mlibc-clean/options/posix/generic/posix_locale.cpp
+++ mlibc-workdir/options/posix/generic/posix_locale.cpp
@@ -1,34 +1,55 @@
+#include <errno.h>
+#include <locale.h>
+
 #include <bits/posix/posix_locale.h>
 #include <bits/ensure.h>
 #include <mlibc/debug.hpp>
 
 namespace {
 
-bool newlocale_seen = false;
-bool uselocale_seen = false;
+struct LocaleObject {
+	/* ... */
+};
+
+LocaleObject cLocaleObject = {};
 
 }
 
-locale_t newlocale(int, const char *, locale_t) {
-	// Due to all of the locale functions being stubs, the locale will not be used
-	if(!newlocale_seen) {
-		mlibc::infoLogger() << "mlibc: newlocale() is a no-op" << frg::endlog;
-		newlocale_seen = true;
+locale_t newlocale(int, const char *locale, locale_t) {
+	if(!locale) {
+		errno = EINVAL;
+		return nullptr;
 	}
-	return nullptr;
+
+	if(strcmp(locale, "C") != 0 && strcmp(locale, "POSIX") != 0) {
+		mlibc::infoLogger() << "mlibc: newlocale() only supports \"C\" and \"POSIX\" locales" << frg::endlog;
+		errno = ENOENT;
+		return nullptr;
+	}
+
+	mlibc::infoLogger() << "mlibc: newlocale() is a stub" << frg::endlog;
+	return (locale_t)&cLocaleObject;
 }
 
 void freelocale(locale_t) {
 	mlibc::infoLogger() << "mlibc: freelocale() is a no-op" << frg::endlog;
-	return;
 }
 
-locale_t uselocale(locale_t) {
-	if(!uselocale_seen) {
-		mlibc::infoLogger() << "mlibc: uselocale() is a no-op" << frg::endlog;
-		uselocale_seen = true;
+locale_t uselocale(locale_t locale) {
+	if(!locale) {
+		errno = EINVAL;
+		return nullptr;
 	}
-	return nullptr;
+
+	if(locale == LC_GLOBAL_LOCALE) {
+		locale = &cLocaleObject;
+	} else if(locale != &cLocaleObject) {
+		errno = EINVAL;
+		return nullptr;
+	}
+
+	mlibc::infoLogger() << "mlibc: uselocale() is a stub" << frg::endlog;
+	return &cLocaleObject;
 }
 
 locale_t duplocale(locale_t) {
diff --git mlibc-clean/options/posix/generic/sys-uio.cpp mlibc-workdir/options/posix/generic/sys-uio.cpp
index 0f14bc0..607b224 100644
--- mlibc-clean/options/posix/generic/sys-uio.cpp
+++ mlibc-workdir/options/posix/generic/sys-uio.cpp
@@ -65,3 +65,13 @@ ssize_t pwritev(int, const struct iovec *, int, off_t) {
 	__ensure(!"Not implemented");
 	__builtin_unreachable();
 }
+
+ssize_t process_vm_readv(pid_t, const struct iovec *, unsigned long, const struct iovec *, unsigned long, unsigned long) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
+
+ssize_t process_vm_writev(pid_t, const struct iovec *, unsigned long, const struct iovec *, unsigned long, unsigned long) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
diff --git mlibc-clean/options/posix/generic/termios.cpp mlibc-workdir/options/posix/generic/termios.cpp
index 631456a..09c26b9 100644
--- mlibc-clean/options/posix/generic/termios.cpp
+++ mlibc-workdir/options/posix/generic/termios.cpp
@@ -101,3 +101,7 @@ int tcsetattr(int fd, int opts, const struct termios *attr) {
 	return 0;
 }
 
+int cfsetspeed(struct termios *, speed_t) {
+	__ensure(!"Not implemented");
+	__builtin_unreachable();
+}
diff --git mlibc-clean/options/posix/include/mqueue.h mlibc-workdir/options/posix/include/mqueue.h
index cbee138..485607f 100644
--- mlibc-clean/options/posix/include/mqueue.h
+++ mlibc-workdir/options/posix/include/mqueue.h
@@ -15,6 +15,7 @@ int mq_getattr(mqd_t __mqdes, struct mq_attr *__attr);
 int mq_setattr(mqd_t __mqdes, const struct mq_attr *__restrict__ __newattr, struct mq_attr *__restrict__ __oldattr);
 int mq_unlink(const char *__name);
 mqd_t mq_open(const char *__name, int __flags, ...);
+int mq_close(mqd_t __mqdes);
 
 #endif /* !__MLIBC_ABI_ONLY */
 
diff --git mlibc-clean/options/posix/include/sys/msg.h mlibc-workdir/options/posix/include/sys/msg.h
index f62220a..be4afe2 100644
--- mlibc-clean/options/posix/include/sys/msg.h
+++ mlibc-workdir/options/posix/include/sys/msg.h
@@ -9,6 +9,17 @@
 extern "C" {
 #endif
 
+struct msginfo {
+	int msgpool;
+	int msgmap;
+	int msgmax;
+	int msgmnb;
+	int msgmni;
+	int msgssz;
+	int msgtql;
+	unsigned short int msgseg;
+};
+
 #ifndef __MLIBC_ABI_ONLY
 
 int msgget(key_t __key, int __msgflg);
diff --git mlibc-clean/options/posix/include/sys/sem.h mlibc-workdir/options/posix/include/sys/sem.h
index d98f91f..07aebd1 100644
--- mlibc-clean/options/posix/include/sys/sem.h
+++ mlibc-workdir/options/posix/include/sys/sem.h
@@ -12,9 +12,15 @@ extern "C" {
 #define GETPID 11
 #define GETVAL 12
 #define GETALL 13
+#define GETNCNT 14
+#define GETZCNT 15
 #define SETVAL 16
 #define SETALL 17
 
+#define SEM_STAT 18
+#define SEM_INFO 19
+#define SEM_STAT_ANY 20
+
 #define SEM_UNDO 0x1000
 
 struct sembuf {
@@ -31,6 +37,19 @@ struct semid_ds {
 	unsigned long   sem_nsems;
 };
 
+struct seminfo {
+	int semmap;
+	int semmni;
+	int semmns;
+	int semmnu;
+	int semmsl;
+	int semopm;
+	int semume;
+	int semusz;
+	int semvmx;
+	int semaem;
+};
+
 #ifndef __MLIBC_ABI_ONLY
 
 int semget(key_t __key, int __nsems, int __semflg);
diff --git mlibc-clean/options/posix/include/sys/uio.h mlibc-workdir/options/posix/include/sys/uio.h
index 1547036..a6184dd 100644
--- mlibc-clean/options/posix/include/sys/uio.h
+++ mlibc-workdir/options/posix/include/sys/uio.h
@@ -1,6 +1,7 @@
 #ifndef _SYS_UIO_H
 #define _SYS_UIO_H
 
+#include <abi-bits/pid_t.h>
 #include <bits/posix/iovec.h>
 #include <bits/ssize_t.h>
 #include <bits/off_t.h>
@@ -22,6 +23,12 @@ ssize_t writev(int __fd, const struct iovec *__iov, int __iovcnt);
 ssize_t preadv(int __fd, const struct iovec *__iov, int __iovcnt, off_t __offset);
 ssize_t pwritev(int __fd, const struct iovec *__iov, int __iovcnt, off_t __offset);
 
+// Linux extensions
+ssize_t process_vm_readv(pid_t __pid, const struct iovec *__local_iov, unsigned long __liovcnt, const struct iovec *__remote_iov,
+	unsigned long __riovcnt, unsigned long __flags);
+ssize_t process_vm_writev(pid_t __pid, const struct iovec *__local_iov, unsigned long __liovcnt, const struct iovec *__remote_iov,
+	unsigned long __riovcnt, unsigned long __flags);
+
 #endif /* !__MLIBC_ABI_ONLY */
 
 #ifdef __cplusplus
diff --git mlibc-clean/options/posix/include/termios.h mlibc-workdir/options/posix/include/termios.h
index cf2025b..3f2f295 100644
--- mlibc-clean/options/posix/include/termios.h
+++ mlibc-workdir/options/posix/include/termios.h
@@ -87,6 +87,7 @@ int tcgetattr(int fd, struct termios *__attr);
 pid_t tcgetsid(int __fd);
 int tcsendbreak(int __fd, int __duration);
 int tcsetattr(int __fd, int __optional_actions, const struct termios *__attr);
+int cfsetspeed(struct termios *__tios, speed_t __speed);
 
 #endif /* !__MLIBC_ABI_ONLY */
 
diff --git mlibc-clean/sysdeps/linux/generic/sysdeps.cpp mlibc-workdir/sysdeps/linux/generic/sysdeps.cpp
index a24da3c..4d1d384 100644
--- mlibc-clean/sysdeps/linux/generic/sysdeps.cpp
+++ mlibc-workdir/sysdeps/linux/generic/sysdeps.cpp
@@ -1872,6 +1872,14 @@ int sys_readlink(const char *path, void *buf, size_t bufsiz, ssize_t *len) {
 	return 0;
 }
 
+int sys_readlinkat(int dirfd, const char *path, void *buffer, size_t max_size, ssize_t *length) {
+	auto ret = do_syscall(SYS_readlinkat, dirfd, path, buffer, max_size);
+	if (int e = sc_error(ret); e)
+		return e;
+	*length = sc_int_result<ssize_t>(ret);
+	return 0;
+}
+
 #if __MLIBC_BSD_OPTION
 // getloadavg() adapted from musl
 int sys_getloadavg(double *samples) {
